version: "3.8"

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    hostname: zookeeper
    restart: always
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

    networks:
      kafka:

  kafka1:
    image: confluentinc/cp-kafka:latest
    container_name: kafka1
    ports:
      - "29091:29091"
    depends_on:
      - zookeeper
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka1
      # 브로커 ID 및 Zookeeper 설정
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181

      # 첫 번째 리스너 - EC2 FASTAPI 에서 사용
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:9092,EXTERNAL://10.0.4.172:29091
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      # 브로커 간 통신 리스너 설정
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL

    healthcheck:
      test: [ "CMD", "nc", "-z", "kafka1", "29091" ]
      interval: 10s
      timeout: 5s
      retries: 5
    
    restart: on-failure

    networks:
      kafka:

  kafka2:
    image: confluentinc/cp-kafka:latest
    container_name: kafka2
    ports:
      - "29092:29092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka2
      # 브로커 ID 및 Zookeeper 설정
      KAFKA_BROKER_ID: 2 
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181

      # 두 번째 리스너 - EC2 스파크 에서 사용
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka2:9092,EXTERNAL://10.0.4.172:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      # 브로커 간 통신 리스너 설정
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL

    healthcheck:
      test: [ "CMD", "nc", "-z", "kafka2", "29092" ]
      interval: 10s
      timeout: 5s
      retries: 5

    restart: on-failure

    networks:
      kafka:

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8080:8080"
    restart: always
    depends_on:
      - kafka1
      - kafka2
    environment:
      KAFKA_BROKERCONNECT: "kafka1:9092,kafka2:9092"
      KAFKA_CLUSTERS_0_NAME: "my-cluster"  # 원하는 클러스터 이름
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "kafka1:9092,kafka2:9092"  # Kafka 브로커 외부 IP
      KAFKA_UI_PORT: "8080"
      SERVER_SERVLET_CONTEXT_PATH: "/kafkaui"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/kafkaui" ]
      interval: 10s
      timeout: 5s
      retries: 5

    networks:
      kafka:

networks:
  kafka:
    driver: bridge

